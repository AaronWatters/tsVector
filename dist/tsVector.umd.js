(function(l,i){typeof exports=="object"&&typeof module<"u"?i(exports):typeof define=="function"&&define.amd?define(["exports"],i):(l=typeof globalThis<"u"?globalThis:l||self,i(l.tsVector={}))})(this,function(l){"use strict";function i(e,n){return e+n}function b(e,n){return e-n}function o(e){return Array(e).fill(0)}function g(e,n){let r=o(e.length);for(let t=0;t<e.length;t++)r[t]=e[t]+n[t];return r}function A(e,n){let r=o(e.length);for(let t=0;t<e.length;t++)r[t]=Math.min(e[t],n[t]);return r}function S(e,n){let r=o(e.length);for(let t=0;t<e.length;t++)r[t]=Math.max(e[t],n[t]);return r}function d(e,n){let r=o(n.length);for(let t=0;t<n.length;t++)r[t]=e*n[t];return r}function M(e,n){return g(e,d(-1,n))}function v(e){return Math.sqrt(e.reduce((n,r)=>n+r*r,0))}function Z(e){return d(1/v(e),e)}function m(e,n=1e-6){return v(e)<n}function j(e,n,r=1e-6){return m(M(e,n),r)}function f(e,n){return Array(e).fill(0).map(()=>o(n))}function C(e,n){let r=f(4,4);for(let t=0;t<3;t++){for(let u=0;u<3;u++)r[t][u]=e[t][u];r[t][3]=n[t]}return r[3][3]=1,r}function s(e,n=!1){let r=e.length,t=e[0].length;if(n){for(let u=1;u<r;u++)if(e[u].length!==t)throw new Error(`Row ${u} has ${e[u].length} columns, expected ${t}`)}return[e.length,e[0].length]}function P(e){let n=f(e,e);for(let r=0;r<e;r++)n[r][r]=1;return n}function T(e,n){let r=o(e.length);for(let t=0;t<e.length;t++)for(let u=0;u<e[t].length;u++)r[t]+=e[t][u]*n[u];return r}function $(e,n){const[r,t]=s(e),[u,y]=s(n);if(t!==u)throw new Error(`Matrix A has ${t} columns, Matrix B has ${u} rows. Cannot multiply.`);let w=f(r,y);for(let c=0;c<r;c++)for(let h=0;h<y;h++)for(let a=0;a<t;a++)w[c][h]+=e[c][a]*n[a][h];return w}function N(e){return e.map(n=>n.slice())}function z(e,n=.001){return e.map(r=>r.map(t=>Math.abs(t-Math.round(t))<n?Math.round(t):t))}l.MCopy=N,l.MMProduct=$,l.MTolerate=z,l.Mshape=s,l.MvProduct=T,l.add=i,l.affine3d=C,l.eye=P,l.mZero=f,l.subtract=b,l.vAdd=g,l.vClose=j,l.vLength=v,l.vMax=S,l.vMin=A,l.vNearlyZero=m,l.vNormalize=Z,l.vScale=d,l.vSub=M,l.vZero=o,Object.defineProperty(l,Symbol.toStringTag,{value:"Module"})});
